package auto_testcase_generation.testdatagen;

import auto_testcase_generation.cfg.CFGGenerationforSubConditionCoverage;
import auto_testcase_generation.cfg.ICFG;
import auto_testcase_generation.cfg.object.AbstractConditionLoopCfgNode;
import auto_testcase_generation.cfg.object.ConditionCfgNode;
import auto_testcase_generation.cfg.object.EndFlagCfgNode;
import auto_testcase_generation.cfg.object.ICfgNode;
import auto_testcase_generation.cfg.testpath.FullTestpath;
import auto_testcase_generation.cfg.testpath.FullTestpaths;
import com.dse.boundary.PrimitiveBound;
import com.dse.boundary.WhiteboxBoundaryMultipleBound;
import com.dse.config.IFunctionConfigBound;
import com.dse.config.WorkspaceConfig;
import com.dse.guifx_v3.controllers.TestCasesNavigatorController;
import com.dse.guifx_v3.helps.CacheHelper;
import com.dse.guifx_v3.helps.UIController;
import com.dse.guifx_v3.helps.UILogger;
import com.dse.guifx_v3.objects.TestCasesTreeItem;
import com.dse.logger.AkaLogger;
import com.dse.parser.externalvariable.RelatedExternalVariableDetecter;
import com.dse.parser.object.*;
import com.dse.parser.object.INode;
import com.dse.resolver.NewTypeResolver;
import com.dse.search.Search2;
import com.dse.testcase_execution.TestcaseExecution;
import com.dse.testcase_manager.ITestCase;
import com.dse.testcase_manager.TestCase;
import com.dse.testcase_manager.TestCaseManager;
import com.dse.testdata.gen.module.TreeExpander;
import com.dse.testdata.object.*;
import com.dse.thread.task.AutoGeneratedTestCaseExecTask;
import com.dse.util.IRegex;
import com.dse.util.Utils;
import com.dse.util.VariableTypeUtils;
import javafx.application.Platform;
import org.eclipse.cdt.core.dom.ast.*;
import org.eclipse.cdt.core.dom.ast.cpp.ICPPASTLiteralExpression;
import org.eclipse.cdt.internal.core.dom.parser.cpp.ICPPEvaluation;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class WhiteboxBoundaryTestDataGeneration extends AbstractAutomatedTestdataGeneration {
    private final static AkaLogger logger = AkaLogger.get(WhiteboxBoundaryTestDataGeneration.class);

    /**
     * Represent control flow graph
     */
    private ICFG cfg;
    private int maxIterationsforEachLoop;
    private final FullTestpaths possibleTestpaths = new FullTestpaths();
    private final List<IVariableNode> variables;
    public String bufferName="";
    public String bufferType="";

    public WhiteboxBoundaryTestDataGeneration(ICommonFunctionNode fn, String coverageType) {
        super(fn);
        this.coverageType = coverageType;

        /*
         * There is no previous test case, just need to construct a cfg
         */
        try {
            if (fn instanceof MacroFunctionNode) {
                IFunctionNode tmpFunctionNode = ((MacroFunctionNode) fn).getCorrespondingFunctionNode();
                cfg = new CFGGenerationforSubConditionCoverage(tmpFunctionNode).generateCFG();
                cfg.setFunctionNode(tmpFunctionNode);
            } else if (fn instanceof AbstractFunctionNode) {
                cfg = new CFGGenerationforSubConditionCoverage((IFunctionNode) fn).generateCFG();
                cfg.setFunctionNode((IFunctionNode) fn);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        this.maxIterationsforEachLoop = 1;
        this.cfg.resetVisitedStateOfNodes();
        this.cfg.setIdforAllNodes();
        this.variables = new ArrayList<>();
        this.variables.addAll(fn.getArguments());
        RelatedExternalVariableDetecter detector = new RelatedExternalVariableDetecter((IFunctionNode) fn);
        this.variables.addAll(detector.findVariables());

        TestCasesTreeItem treeItem = CacheHelper.getFunctionToTreeItemMap().get(fn);
        if (CacheHelper.getTreeItemToListTestCasesMap().get(treeItem) != null)
            CacheHelper.getTreeItemToListTestCasesMap().get(treeItem).clear();

        testCases = TestCaseManager.getTestCasesByFunction(this.fn);
    }

    public static void main(String[] args) throws Exception {
        boolean b = Pattern.matches("a" + IRegex.ARRAY_INDEX + ".age" + ".*", "a[i].age.xyz");
        System.out.println(b);

    }

    public static boolean isNumeric(String strNum) {


        if (strNum == null) {
            return false;
        }

        IASTNode ast = Utils.convertToIAST(strNum);
        if (ast instanceof ICPPASTLiteralExpression) {
            ICPPEvaluation evaluation = ((ICPPASTLiteralExpression) ast).getEvaluation();
            IType type = evaluation.getType(null);
            if (VariableTypeUtils.isNum(type.toString()))
                return true;
        }

        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe2) {
                return false;
            }
        }

        return true;
    }

    public void generateTestdata(ICommonFunctionNode fn) throws Exception {
        List<TestCase> oldTestcases = new ArrayList<>(testCases);
        //get bound
        List<WhiteboxBoundaryMultipleBound> varMultipleBounds = new ArrayList<WhiteboxBoundaryMultipleBound>();
        for (IVariableNode var : variables) {
            String realType = var.getRealType();
            if (VariableTypeUtils.isStructureSimple(realType) || VariableTypeUtils.isStructureMultiDimension(realType) || VariableTypeUtils.isStructurePointerMultiLevel(realType)) {
                INode node = var.resolveCoreType();
                if (node instanceof StructNode) {
                    StructNode typeNode = (StructNode) node;
                    ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                    genTestDataForComplexNode(varMultipleBounds, var, attributes);
                }
                else if(node instanceof ClassNode){
                    ClassNode typeNode = (ClassNode) node;
                    ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                    genTestDataForComplexNode(varMultipleBounds, var, attributes);
                }
                else if(node instanceof UnionNode){
                    UnionNode typeNode = (UnionNode) node;
                    ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                    genTestDataForComplexNode(varMultipleBounds, var, attributes);
                }
                else if(node instanceof EnumNode){
                    List<String> boundValues = new ArrayList<String>();
                    ICfgNode beginNode = cfg.getBeginNode();
                    FullTestpath initialTestpath = new FullTestpath();
                    initialTestpath.setFunctionNode(cfg.getFunctionNode());
                    String originalName = var.getName();
                    String type = var.getCoreType();
                    try {
                        traverseCFG(beginNode, initialTestpath, originalName, type, var, boundValues, varMultipleBounds);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (!boundValues.isEmpty()) {
                        WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(var, boundValues);
                        varMultipleBounds.add(multipleBound);
                    }
                }
                else {
                    List<String> boundValues = new ArrayList<String>();
                    ICfgNode beginNode = cfg.getBeginNode();
                    FullTestpath initialTestpath = new FullTestpath();
                    initialTestpath.setFunctionNode(cfg.getFunctionNode());
                    String originalName = var.getName();
                    String type = var.getCoreType();
                    try {
                        traverseCFG(beginNode, initialTestpath, originalName, type, var, boundValues, varMultipleBounds);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (!boundValues.isEmpty()) {
                        IVariableNode clone = var.clone();
                        clone.setName(this.bufferName);
                        clone.setCoreType(this.bufferType);
                        WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(clone, boundValues);
                        if (!varMultipleBounds.contains(multipleBound)) {
                            varMultipleBounds.add(multipleBound);
                        }
                    }
                }
            }
            else if(VariableTypeUtils.isOneDimension(realType) && realType.contains("*[")){
                List<String> boundValues = new ArrayList<String>();
                ICfgNode beginNode = cfg.getBeginNode();
                FullTestpath initialTestpath = new FullTestpath();
                initialTestpath.setFunctionNode(cfg.getFunctionNode());
                String originalName = var.getName()+IRegex.ARRAY_INDEX+IRegex.ARRAY_INDEX;
                String type = var.getRealType();
                try {
                    traverseCFG(beginNode, initialTestpath, originalName, type, var, boundValues, varMultipleBounds);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (!boundValues.isEmpty()) {
                    IVariableNode clone = var.clone();
                    clone.setName(this.bufferName);
                    clone.setCoreType(this.bufferType);
                    WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(clone, boundValues);
                    varMultipleBounds.add(multipleBound);
                }
            }
            else {
                List<String> boundValues = new ArrayList<String>();
                ICfgNode beginNode = cfg.getBeginNode();
                FullTestpath initialTestpath = new FullTestpath();
                initialTestpath.setFunctionNode(cfg.getFunctionNode());
                String originalName = var.getName();
                String type = var.getCoreType();
                try {
                    traverseCFG(beginNode, initialTestpath, originalName, type, var, boundValues, varMultipleBounds);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (!boundValues.isEmpty()) {
                    IVariableNode clone = var.clone();
                    clone.setName(this.bufferName);
                    clone.setCoreType(this.bufferType);
                    WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(clone, boundValues);
                    if (!varMultipleBounds.contains(multipleBound)) {
                        varMultipleBounds.add(multipleBound);
                    }
                }
            }
        }

        //filter
        List<WhiteboxBoundaryMultipleBound> sub_varMultipleBounds= new ArrayList<WhiteboxBoundaryMultipleBound>();
        for(WhiteboxBoundaryMultipleBound multiBounds : varMultipleBounds){
            sub_varMultipleBounds.add(multiBounds);
        }
        List <String> multiBoundNames = new ArrayList<String>();
        for(WhiteboxBoundaryMultipleBound multiBounds : sub_varMultipleBounds){
            String name = multiBounds.getVar().getName();
            if(!multiBoundNames.contains(name)){
                multiBoundNames.add(name);
            }
            else{
                varMultipleBounds.remove(varMultipleBounds.indexOf(multiBounds));
            }
        }

        //gen test data
        if(varMultipleBounds.size()!=0){
            for (WhiteboxBoundaryMultipleBound multiBounds : varMultipleBounds) {
                String norm = multiBounds.getNorm();
                boolean hasNorm = false;
                //lap 3 lan cac bien xung quanh tung gia tri bien (So sanh voi cac params cua UUT)
                for (int i = -1; i < 2; i++) {
                    //duyet tung bien cua 1 bien
                    ExecutorService es = Executors.newFixedThreadPool(5);
                    List<Callable<String>> tasks = new ArrayList<>();
                    for (String bound : multiBounds.getBoundValues()) {
                        StringHandler task = new StringHandler(bound, i, multiBounds, varMultipleBounds);
                        tasks.add(task);
//                        task.handleData();
                    }
                    es.invokeAll(tasks);
                }
                if (!multiBounds.getBoundValues().contains(norm)) {
                    multiBounds.getBoundValues().add(norm);
                    hasNorm = true;
                }
                //sinh test cho norm
                if (hasNorm) {
                    StringHandler task = new StringHandler(multiBounds.getLast(), 0, multiBounds, varMultipleBounds);
                    task.handleData();
                }
            }
        }
        else {
            TestCase testCase = createTestcase(fn);
            RootDataNode root = testCase.getRootDataNode();
            IDataNode sutRoot = Search2.findSubprogramUnderTest(root);
            IDataNode globalRoot = Search2.findGlobalRoot(root);
            List<IDataNode> parameters = sutRoot.getChildren();
            List<IDataNode> globalParameters = globalRoot.getChildren();
            List<IDataNode> allParameters = Stream.concat(parameters.stream(), globalParameters.stream())
                    .collect(Collectors.toList());
            traverseNoBound(allParameters);
        }

        logger.debug("Test case: " + this.testCases);

        for (int i = testCases.size() - 1; i >= 0; i--)
            if (oldTestcases.contains(testCases.get(i))) {
                testCases.remove(i);
            }

        List<ITestCase> origin = testCases.stream().map(tc -> (ITestCase) tc).collect(Collectors.toList());

//        TestCaseCleaner.clean(origin, TestCaseCleaner.Scope.SOURCE);

        onGenerateSuccess(showReport);
    }

    public void genTestDataForComplexNode(List<WhiteboxBoundaryMultipleBound> varMultipleBounds,IVariableNode var, ArrayList<IVariableNode> attributes){
        for (IVariableNode attrVar : attributes) {
            List<String> boundValues = new ArrayList<String>();
            ICfgNode beginNode = cfg.getBeginNode();
            FullTestpath initialTestpath = new FullTestpath();
            initialTestpath.setFunctionNode(cfg.getFunctionNode());
            String originalName = "";//ten bien de xet regex
            if (VariableTypeUtils.isStructureSimple(var.getRealType())) {
                originalName = var.getName() + "." + attrVar.getName();
            } else {
                originalName = var.getName() + "[i]" + "." + attrVar.getName();
            }

            String type = attrVar.getRealType();
            try {
                traverseCFG(beginNode, initialTestpath, originalName, type, attrVar, boundValues, varMultipleBounds);
            } catch (Exception e) {
                e.printStackTrace();
            }

            if (!boundValues.isEmpty()) {
                IVariableNode clone = attrVar.clone();
                clone.setName(this.bufferName);
                clone.setCoreType(this.bufferType);
                clone.setParent(var);
                WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(clone, boundValues);
                varMultipleBounds.add(multipleBound);
            }
        }
    }
    public void genTestDataForComplexNode(List<WhiteboxBoundaryMultipleBound> varMultipleBounds, IVariableNode arguments, ArrayList<IVariableNode> attributes,String originalName){
        for (IVariableNode attrVar : attributes) {
            List<String> boundValues2 = new ArrayList<String>();
            ICfgNode beginNode = cfg.getBeginNode();
            FullTestpath initialTestpath = new FullTestpath();
            initialTestpath.setFunctionNode(cfg.getFunctionNode());
            String originalName2 = "";//ten bien de xet regex
            originalName2 = originalName + "." + attrVar.getName();
            String typeStruct = attrVar.getRealType();
            try {
                traverseCFG(beginNode, initialTestpath, originalName2, typeStruct, attrVar, boundValues2, varMultipleBounds);
            } catch (Exception e) {
                e.printStackTrace();
            }

            if (!boundValues2.isEmpty()) {
                IVariableNode clone = attrVar.clone();
                clone.setName(this.bufferName);
                clone.setCoreType(this.bufferType);
                clone.setParent(arguments);
                WhiteboxBoundaryMultipleBound multipleBound = new WhiteboxBoundaryMultipleBound(clone, boundValues2);
                if (!varMultipleBounds.contains(multipleBound)) {
                    varMultipleBounds.add(multipleBound);
                }
            }
        }
    }

    private void traverseCFG(ICfgNode stm, FullTestpath tp, String originalName, String type, IVariableNode arguments, List<String> boundValues, List<WhiteboxBoundaryMultipleBound> varMultipleBounds) throws Exception {
        type = type.replace("*","").replace("[","").replace("]","");
        if (stm instanceof EndFlagCfgNode) {
            return;
        }
        if (stm instanceof ConditionCfgNode) {
            if (((ConditionCfgNode) stm).getAst() instanceof IASTBinaryExpression) {
                IASTExpression astOp1 = ((IASTBinaryExpression) ((ConditionCfgNode) stm).getAst()).getOperand1();
                IASTExpression astOp2 = ((IASTBinaryExpression) ((ConditionCfgNode) stm).getAst()).getOperand2();
                String op1 = astOp1.getRawSignature();
                String op2 = astOp2.getRawSignature();
                String type1 = new NewTypeResolver(fn).exec(astOp1);
                String type2 = new NewTypeResolver(fn).exec(astOp2);

                if (((Pattern.matches(originalName + ".*", op1) || Pattern.matches(originalName + ".*", op2))) && VariableTypeUtils.isStructureSimple(type)) {
                    INode node = arguments.resolveCoreType();
                    if (node instanceof StructNode) {
                        StructNode typeNode = (StructNode) node;
                        ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                        genTestDataForComplexNode(varMultipleBounds, arguments, attributes, originalName);
                    }
                    else if (node instanceof ClassNode) {
                        ClassNode typeNode = (ClassNode) node;
                        ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                        genTestDataForComplexNode(varMultipleBounds, arguments, attributes, originalName);

                    }
                    else if (node instanceof UnionNode) {
                        UnionNode typeNode = (UnionNode) node;
                        ArrayList<IVariableNode> attributes = typeNode.getPublicAttributes();
                        genTestDataForComplexNode(varMultipleBounds, arguments, attributes, originalName);
                    }
                }
                else {
                    String boundName ="";
                    IASTExpression exp1 = ((IASTBinaryExpression) ((ConditionCfgNode) stm).getAst()).getOperand1() ;
                    IASTNode root = exp1.getOriginalNode();
                    boolean isDotted = false;
                    if(exp1 instanceof IASTFieldReference || exp1 instanceof IASTArraySubscriptExpression|| exp1 instanceof IASTUnaryExpression){
                        if(exp1 instanceof IASTFieldReference){
                            root = ((IASTFieldReference) exp1).getFieldOwner();
                            boundName = ((IASTFieldReference) exp1).getFieldName().getRawSignature();
                            isDotted=false;
                        }
                        else if (exp1 instanceof IASTArraySubscriptExpression) {
                            root = ((IASTArraySubscriptExpression) exp1).getArrayExpression();
                            boundName="[i]";
                            isDotted=true;
                        }
                        else {
                            root = ((IASTUnaryExpression) exp1).getOperand();
                            isDotted=true;
                        }
                        while(true){
                            if(root instanceof IASTFieldReference){
                                String fReference = ((IASTFieldReference) root).getFieldName().getRawSignature();
                                if(isDotted){
                                    boundName = fReference+boundName;
                                }else{
                                    boundName = fReference+"."+boundName;
                                }
                                root = ((IASTFieldReference) root).getFieldOwner();
                                isDotted=false;
                            }
                            else if(root instanceof IASTUnaryExpression){
                                root = ((IASTUnaryExpression) root).getOperand();

                            }
                            else if(root instanceof IASTArraySubscriptExpression){
                                if(isDotted){
                                    boundName = "[i]"+boundName;
                                }else{
                                    boundName = "[i]."+boundName;
                                }
                                isDotted=true;
                                root = ((IASTArraySubscriptExpression) root).getArrayExpression();
                            }
                            else if (root instanceof IASTIdExpression)
                            {
                                String idExp = ((IASTIdExpression) root).getName().getRawSignature();
                                if(isDotted){
                                    boundName=idExp+boundName;
                                }else{
                                    boundName=idExp+"."+boundName;
                                }

                                if(Pattern.matches(originalName,boundName)||boundName.startsWith(originalName)){
                                    if (isValue(op2,type2))
                                        if (!boundValues.contains(op2)) {
                                            boundValues.add(op2);
                                        }
                                    this.bufferName=boundName;
                                    this.bufferType=type1;
                                }
                                break;
                            }

                        }
                    }
                    else if (exp1 instanceof IASTIdExpression){
                        boundName = ((IASTIdExpression) exp1).getName().getRawSignature();

                        if(boundName.equals(originalName)){
                            if (isValue(op2,type2))
                                if (!boundValues.contains(op2)) {
                                    boundValues.add(op2);
                                }
                            this.bufferName=boundName;
                            this.bufferType=type1;
                        }
                    }
                }

            }
            tp.add(stm);
        } else {
            tp.add(stm);
        }

        ICfgNode trueNode = stm.getTrueNode();
        ICfgNode falseNode = stm.getFalseNode();

        if (stm instanceof ConditionCfgNode) {

            if (stm instanceof AbstractConditionLoopCfgNode) {

                int currentIterations = tp.count(trueNode);
                if (currentIterations < maxIterationsforEachLoop) {

                    traverseCFG(falseNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);
                    traverseCFG(trueNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);
                } else {
                    traverseCFG(falseNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);
                }
            } else {

                traverseCFG(falseNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);

                traverseCFG(trueNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);

            }
        } else {
            traverseCFG(trueNode, tp, originalName, type, arguments, boundValues, varMultipleBounds);
        }


    }

    public String getCharBound(String bound, int i) {
        bound = Utils.preprocessorLiteral(bound);
        try {
            String sub = bound.substring(bound.lastIndexOf('\'') - 1, bound.lastIndexOf('\''));
            char s = sub.charAt(0);
            int ascii = (int) s + i;
            bound = String.valueOf(ascii);
        } catch (Exception error) {
            int value = Integer.parseInt(bound);
            int ascii = value + i;
            bound = String.valueOf(ascii);
        }
        return bound;
    }

    public String getIntBound(String bound, int i) {
        bound = Utils.preprocessorLiteral(bound);
        try {
            Long newBound = Long.parseLong(bound) + i;
            bound = String.valueOf(newBound);
        } catch (NumberFormatException error) {
            Double newBound = Double.parseDouble(bound) + i;
            Long longBound = newBound.longValue();
            bound = String.valueOf(longBound);
        }
        return bound;
    }

    public String getFloatBound(String bound, int i) {
        bound = Utils.preprocessorLiteral(bound);
        Double newBound = Double.parseDouble(bound) + i;
        bound = String.valueOf(newBound);
        return bound;
    }

    public void genRandomValue(NormalDataNode param){
        Random rand =  new Random();
        if(param instanceof NormalNumberDataNode){
            try{
                int int_random=rand.nextInt();
                String stringInt = String.valueOf(int_random);
                ((NormalNumberDataNode) param).setValue(stringInt);
            }catch(Exception error){
                double double_random=rand.nextDouble();
                String stringDouble = String.valueOf(double_random);
                ((NormalNumberDataNode) param).setValue(stringDouble);
            }
        }
        else if(param instanceof NormalCharacterDataNode){
            int upperBound = 128;
            int int_random = rand.nextInt(upperBound);
            String randomChar = String.valueOf(int_random);
            param.setValue(randomChar);
        }
    }

    public void setArrayDataNodeSize(IDataNode var) throws Exception {
        int size = ((OneDimensionDataNode) var).getSize();
        IFunctionConfigBound tempBound = fn.getFunctionConfig().getBoundOfArray();
        if (size <= 0) {
            size = Integer.parseInt(((PrimitiveBound) tempBound).getUpper());
            ((OneDimensionDataNode) var).setSize(size);
            ((OneDimensionDataNode) var).setSizeIsSet(true);
            new TreeExpander().expandTree((ValueDataNode) var);
        }
    }

    public void setPointerDataNodeSize(IDataNode var) throws Exception {
        int size = ((PointerDataNode) var).getAllocatedSize();
        IFunctionConfigBound tempBound = fn.getFunctionConfig().getBoundOfArray();
        if (size <= 0) {
            size = Integer.parseInt(((PrimitiveBound) tempBound).getLower());
            ((PointerDataNode) var).setAllocatedSize(size);
            ((PointerDataNode) var).setSizeIsSet(true);
            new TreeExpander().expandTree((ValueDataNode) var);
        }
    }

    public boolean isValue(String op, String type){
        if (isNumeric(op) || (VariableTypeUtils.isChBasic(type) && op.startsWith("\'")))
            return true;
        return false;
    }

    public ICFG getCfg() {
        return cfg;
    }

    public void setCfg(ICFG cfg) {
        this.cfg = cfg;
    }

    public int getMaxIterationsforEachLoop() {
        return maxIterationsforEachLoop;
    }

    public void setMaxIterationsforEachLoop(int maxIterationsforEachLoop) {
        this.maxIterationsforEachLoop = maxIterationsforEachLoop;
    }

    public FullTestpaths getPossibleTestpaths() {
        return possibleTestpaths;
    }

    protected synchronized TestCase createTestcase(ICommonFunctionNode functionNode) {
        TestCase testCase = null;
        // create a new test case at each iteration
        String nameofTestcase = TestCaseManager.generateContinuousNameOfTestcase(functionNode.getSimpleName() + ITestCase.POSTFIX_TESTCASE_BY_BOUNDARY);

        testCase = TestCaseManager.createTestCase(nameofTestcase, functionNode);

        if (testCase != null) {
            TestCaseManager.getNameToBasicTestCaseMap().put(testCase.getName(), testCase);
            testCase.setCreationDateTime(LocalDateTime.now());

            String testpathFileName = nameofTestcase + "__iter__"; // to avoid the misunderstanding between system separator and its name
            String testpathFile = new WorkspaceConfig().fromJson().getTestpathDirectory() + File.separator + testpathFileName + ".tp";
            testCase.setTestPathFile(testpathFile);
        }
        return testCase;
    }

    protected void execute(TestCase testCase, List<AutoGeneratedTestCaseExecTask> execTasks) {

        try {
            TestcaseExecution executor = new TestcaseExecution();
            executor.setFunction(fn);
            executor.setMode(TestcaseExecution.IN_AUTOMATED_TESTDATA_GENERATION_MODE);
            AutoGeneratedTestCaseExecTask task = new AutoGeneratedTestCaseExecTask(executor, testCase, execTasks);
            task.setShowReport(showReport);
            UILogger.getUiLogger().info("Executing test case: " + testCase);
            task.run();
        } catch (Exception e) {
            e.printStackTrace();
            testCases.remove(testCase);
            testCase.setStatus(TestCase.STATUS_FAILED);
            logger.debug("[" + Thread.currentThread().getName() + "] " + "There is a problem with the current test case. Move to the next iteration.");
        }

    }

    private class StringHandler implements Callable<String> {
        String bound;
        int i;
        WhiteboxBoundaryMultipleBound multiBounds;
        List<WhiteboxBoundaryMultipleBound> varMultipleBounds;

        public StringHandler(String bound, int i, WhiteboxBoundaryMultipleBound multiBounds, List<WhiteboxBoundaryMultipleBound> varMultipleBounds) {
            this.bound = bound;
            this.i = i;
            this.multiBounds = multiBounds;
            this.varMultipleBounds = varMultipleBounds;
        }

        @Override
        public String call() throws Exception {
            handleData();
            return null;
        }
        public void handleData()throws Exception{
            String name = multiBounds.getVar().getName();
            String coreType = multiBounds.getVar().getCoreType();
            genTestCaseAndExecute(name,coreType,bound,i,multiBounds,varMultipleBounds);
        }
        //sinh testcase va execute
        public void genTestCaseAndExecute (String name, String coreType, String bound, int i, WhiteboxBoundaryMultipleBound multiBounds, List<WhiteboxBoundaryMultipleBound> varMultipleBounds) throws  Exception{
            TestCase testCase = createTestcase(fn);
            RootDataNode root = testCase.getRootDataNode();
            IDataNode sutRoot = Search2.findSubprogramUnderTest(root);
            IDataNode globalRoot = Search2.findGlobalRoot(root);
            List<IDataNode> parameters = sutRoot.getChildren();
            List<IDataNode> globalParameters = globalRoot.getChildren();
            List<IDataNode> allParameters = Stream.concat(parameters.stream(), globalParameters.stream())
                    .collect(Collectors.toList());
            //duyet tung params cua ham
            traverseParams(allParameters, name, coreType, bound, i, multiBounds, varMultipleBounds);
            testCase.updateToTestCasesNavigatorTree();
            Platform.runLater(() -> TestCasesNavigatorController.getInstance().refreshNavigatorTree());
            testCases.add(testCase);
            TestCasesNavigatorController.getInstance().refreshNavigatorTreeFromAnotherThread();
            execute(testCase, execTasks);
        }
        //duyet tham so & set norm
        private void traverseParams(List<IDataNode> parameters, String name, String coreType, String bound, int i, WhiteboxBoundaryMultipleBound multiBounds,List<WhiteboxBoundaryMultipleBound> varMultipleBounds) throws Exception {
            //set value cho cac params
            for (IDataNode var : parameters) {
                if (Pattern.matches(var.getName(), name)) {
                    if (var instanceof NormalDataNode) {
                        if (var instanceof NormalNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                bound = getFloatBound(bound, i);
                                ((NormalNumberDataNode) var).setValue(bound);
                            } else {
                                bound = getIntBound(bound, i);
                                ((NormalNumberDataNode) var).setValue(bound);
                            }
                        } else if (var instanceof NormalCharacterDataNode) {
                            bound = getCharBound(bound, i);
                            ((NormalCharacterDataNode) var).setValue(bound);
                        }
                    }
                    else if (var instanceof PointerDataNode) {
                        setPointerDataNodeSize(var);
                        if (var instanceof PointerNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                bound = getIntBound(bound, i);
                            } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                bound = getFloatBound(bound, i);
                            }
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalNumberDataNode) {
                                    ((NormalNumberDataNode) child).setValue(bound);
                                }
                            }
                        }
                        else if (var instanceof PointerCharacterDataNode) {
                            bound = getCharBound(bound, i);
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalCharacterDataNode) {
                                    ((NormalCharacterDataNode) child).setValue(bound);
                                }
                            }
                        }
                    }
                    else if (var instanceof EnumDataNode){
                        bound = getIntBound(bound, i);
                        ((EnumDataNode)var).setValue(bound);
                        ((EnumDataNode)var).setValueIsSet(true);
                    }
                    handleOtherVar(parameters, multiBounds, varMultipleBounds);
                }
                else if (var instanceof StructDataNode) {
                    if (Pattern.matches(var.getName() + ".*", name)) {
                        List<IDataNode> parameters2 = var.getChildren();
                        String name2 = name.substring(name.indexOf(".") + 1);
                        traverseParams(parameters2, name2, coreType, bound, i);
                        handleOtherVar(parameters, multiBounds, varMultipleBounds);
                    }
                }
                else if (var instanceof ClassDataNode) {
                    if (Pattern.matches(var.getName() + ".*", name)) {
                        handleClassDataNode((ClassDataNode) var, name, coreType, bound, i);
                        handleOtherVar(parameters, multiBounds, varMultipleBounds);
                    }
                }
                else if (var instanceof UnionDataNode) {
                    if (Pattern.matches(var.getName() + ".*", name)) {
                        handleUnionDataNode((UnionDataNode) var, name, coreType, bound, i);
                        handleOtherVar(parameters, multiBounds, varMultipleBounds);
                    }
                }
                else if (var instanceof OneDimensionStructureDataNode) {
                    setArrayDataNodeSize(var);
                    List<IDataNode> parameters2 = var.getChildren();
                    String name2 = name.substring(name.indexOf(".") + 1);
                    traverseParams(parameters2, name2, coreType, bound, i);
                    handleOtherVar(parameters, multiBounds, varMultipleBounds);
                }
                else if (var instanceof OneDimensionPointerDataNode) {
                    setArrayDataNodeSize(var);
                    List<IDataNode> parameters2 = var.getChildren();
                    String name2 = name.substring(name.indexOf(".")+1);
                    traverseParams(parameters2, name2, coreType, bound, i);
                    handleOtherVar(parameters,multiBounds,varMultipleBounds);
                }
                else if (var instanceof PointerStructureDataNode) {
                    setPointerDataNodeSize(var);
                    List<IDataNode> parameters2 = var.getChildren();
                    String name2 = name.substring(name.indexOf(".") + 1);
                    traverseParams(parameters2, name2, coreType, bound, i);
                    handleOtherVar(parameters, multiBounds, varMultipleBounds);
                }
                else if (var instanceof ArrayDataNode) {
                    if(Pattern.matches(var.getName()+IRegex.ARRAY_INDEX,name)){
                        setArrayDataNodeSize(var);
                        if (var instanceof OneDimensionNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                bound = getIntBound(bound, i);
                            } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                bound = getFloatBound(bound, i);
                            }
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalNumberDataNode) {
                                    ((NormalNumberDataNode) child).setValue(bound);
                                }
                            }
                        }
                        else if (var instanceof OneDimensionCharacterDataNode) {
                            bound = getCharBound(bound, i);
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalCharacterDataNode) {
                                    ((NormalCharacterDataNode) child).setValue(bound);
                                }
                            }
                        }
                        handleOtherVar(parameters, multiBounds, varMultipleBounds);
                    }
                    else {
                        if(var instanceof OneDimensionDataNode){
                            setArrayDataNodeSize(var);
                        }
                    }

                }
                else if (var instanceof PointerDataNode) {
                    setPointerDataNodeSize(var);
                }
            }
        }
        //duyet tham so & khong set norm
        private void traverseParams(List<IDataNode> parameters, String name, String coreType, String bound, int i) throws Exception {
            for (IDataNode var : parameters) {
                if (Pattern.matches(var.getName(), name)) {
                    if (var instanceof NormalDataNode) {
                        if (var instanceof NormalNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                bound = getIntBound(bound, i);
                                ((NormalNumberDataNode) var).setValue(bound);
                            } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                bound = getFloatBound(bound, i);
                                ((NormalNumberDataNode) var).setValue(bound);
                            }
                        } else if (var instanceof NormalCharacterDataNode) {
                            bound = getCharBound(bound, i);
                            ((NormalCharacterDataNode) var).setValue(bound);
                        }
                    }
                    else if (var instanceof PointerDataNode) {
                        setPointerDataNodeSize(var);
                        if (var instanceof PointerNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                bound = getIntBound(bound, i);
                            } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                bound = getFloatBound(bound, i);
                            }
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalNumberDataNode) {
                                    ((NormalNumberDataNode) child).setValue(bound);
                                }
                            }
                        } else if (var instanceof PointerCharacterDataNode) {
                            bound = getCharBound(bound, i);
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalCharacterDataNode) {
                                    ((NormalCharacterDataNode) child).setValue(bound);
                                }
                            }
                        }
                    }
                    else if (var instanceof EnumDataNode){
                        bound = getIntBound(bound, i);
                        ((EnumDataNode)var).setValue(bound);
                        ((EnumDataNode) var).setValueIsSet(true);
                    }
                }
                else if (var instanceof StructDataNode) {
                    List<IDataNode> parameters2 = var.getChildren();
                    String name2 = name.substring(name.indexOf(".") + 1);
                    traverseParams(parameters2, name2, coreType, bound, i);
                }
                else if (var instanceof ClassDataNode) {
                    handleClassDataNode((ClassDataNode) var,name, coreType, bound, i);
                }
                else if (var instanceof UnionDataNode){
                    handleUnionDataNode((UnionDataNode) var,name,coreType,bound,i);
                }
                else if (var instanceof PointerDataNode) {
                    if(name.startsWith(var.getName())||var.getName().contains("[")){
                        setPointerDataNodeSize(var);
                        String childBound="";
                        if (var instanceof PointerNumberDataNode) {
                            if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                childBound = getIntBound(bound, i);
                            } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                childBound = getFloatBound(bound, i);
                            }
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalNumberDataNode) {
                                    ((NormalNumberDataNode) child).setValue(childBound);
                                }
                            }
                        }
                        else if (var instanceof PointerCharacterDataNode) {
                            childBound = getCharBound(bound, i);
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalCharacterDataNode) {
                                    ((NormalCharacterDataNode) child).setValue(childBound);
                                }
                            }
                        }
                        else if (var instanceof PointerStructureDataNode){
                            for (IDataNode child : var.getChildren()) {
                                if(child instanceof StructDataNode ){
                                    List<IDataNode> parameters2 = var.getChildren();
                                    String name2 = name.substring(name.indexOf(".") + 1);
                                    traverseParams(parameters2, name2, coreType, bound, i);
                                }
                                else if(child instanceof ClassDataNode ){
                                    handleClassDataNode((ClassDataNode) child,name, coreType, bound, i);
                                }
                                else if(child instanceof UnionDataNode ){
                                    handleUnionDataNode((UnionDataNode) child,name,coreType,bound,i);
                                }
                            }
                        }
                    }
                }
                else if (var instanceof ArrayDataNode) {
                    if(Pattern.matches(var.getName()+IRegex.ARRAY_INDEX,name)){
                        if (var instanceof OneDimensionDataNode) {
                            setArrayDataNodeSize(var);
                            if (var instanceof OneDimensionNumberDataNode) {
                                if (VariableTypeUtils.isNumBasicInteger(coreType)) {
                                    bound = getIntBound(bound, i);
                                } else if (VariableTypeUtils.isNumBasicFloat(coreType)) {
                                    bound = getFloatBound(bound, i);
                                }
                                for (IDataNode child : var.getChildren()) {
                                    if (child instanceof NormalNumberDataNode) {
                                        ((NormalNumberDataNode) child).setValue(bound);
                                    }
                                }
                            } else if (var instanceof OneDimensionCharacterDataNode) {
                                bound = getCharBound(bound, i);
                                for (IDataNode child : var.getChildren()) {
                                    if (child instanceof NormalCharacterDataNode) {
                                        ((NormalCharacterDataNode) child).setValue(bound);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //set norm
        private void traverseParams(List<IDataNode> parameters, String name, String norm) throws Exception {
            for (IDataNode var : parameters) {
                if (Pattern.matches(var.getName(),name)) {
                    if (var instanceof PointerDataNode) {
                        setPointerDataNodeSize(var);
                        for (IDataNode child : var.getChildren()) {
                            if (child instanceof NormalDataNode) {
                                ((NormalDataNode) child).setValue(norm);
                            }
                        }
                    }
                    else if (var instanceof NormalDataNode) {
                        ((NormalDataNode) var).setValue(norm);
                    }
                    else if (var instanceof EnumDataNode) {
                        ((EnumDataNode) var).setValue(norm);
                    }
                }
                else if (var instanceof StructDataNode) {
                    List<IDataNode> parameters2 = var.getChildren();
                    String name2 = name.substring(name.indexOf(".") + 1);
                    traverseParams(parameters2, name2, norm);

                }
                else if(var instanceof ClassDataNode){
                    handleNormClassDataNode((ClassDataNode) var, name, norm);
                }
                else if(var instanceof UnionDataNode){
                    handleNormUnionDataNode((UnionDataNode) var, name, norm);
                }
                else if (var instanceof PointerDataNode) {
                    if(name.startsWith(var.getName())||var.getName().contains("[")){
                        setPointerDataNodeSize(var);
                        for (IDataNode child : var.getChildren()) {
                            if (child instanceof NormalDataNode) {
                                ((NormalDataNode) child).setValue(norm);
                            }
                            else if(child instanceof StructDataNode ){
                                List<IDataNode> parameters2 = var.getChildren();
                                String name2 = name.substring(name.indexOf(".") + 1);
                                traverseParams(parameters2, name2, norm);
                            }
                            else if(child instanceof ClassDataNode ){
                                handleNormClassDataNode((ClassDataNode) child, name, norm);
                            }
                            else if(child instanceof UnionDataNode ){
                                handleNormUnionDataNode((UnionDataNode) child, name, norm);
                            }
                        }
                    }
                }
                else if (var instanceof ArrayDataNode) {
                    if(Pattern.matches(var.getName()+IRegex.ARRAY_INDEX,name)){
                        if (var instanceof OneDimensionDataNode) {
                            setArrayDataNodeSize(var);
                            for (IDataNode child : var.getChildren()) {
                                if (child instanceof NormalDataNode) {
                                    ((NormalDataNode) child).setValue(norm);
                                }
                            }
                        }
                    }
                }
            }
        }
        //xu ly ClassDataNode
        public void handleClassDataNode(ClassDataNode var, String name, String coreType, String bound, int i) throws Exception{
            List<INode> subClasses = ((ClassDataNode) var).getDerivedClass();
            INode subClass = subClasses.get(0);
            ((ClassDataNode) var).setSubClass(subClass);
            SubClassDataNode subClassDataNode = ((ClassDataNode) var).getSubClass();
            List <ICommonFunctionNode> constructors = subClassDataNode.getConstructorsOnlyInCurrentClass();
            subClassDataNode.chooseConstructor(constructors.get(0));
            (new TreeExpander()).expandTree(subClassDataNode);

            List<IDataNode> parameters2 = subClassDataNode.getChildren();
            ConstructorDataNode constructor =  subClassDataNode.getConstructorDataNode();
            List<IDataNode> constructorParams = constructor.getChildren();
            if(constructorParams.size()!=0){
                for(IDataNode param : constructorParams){
                    if(param instanceof NormalDataNode){
                        genRandomValue((NormalDataNode) param);
                    }
                }
            }
            String name2 = name.substring(name.indexOf(".") + 1);
            traverseParams(parameters2, name2, coreType, bound, i);
        }
        //xu ly norm ClassDataNode
        public void handleNormClassDataNode(ClassDataNode var, String name, String norm) throws Exception{
            if( ((ClassDataNode) var).getSubClass()==null){
                List<INode> subClasses = ((ClassDataNode) var).getDerivedClass();
                INode subClass = subClasses.get(0);
                ((ClassDataNode) var).setSubClass(subClass);
            }


            SubClassDataNode subClassDataNode = ((ClassDataNode) var).getSubClass();
            if (subClassDataNode.getConstructorDataNode()==null){
                List <ICommonFunctionNode> constructors = subClassDataNode.getConstructorsOnlyInCurrentClass();
                subClassDataNode.chooseConstructor(constructors.get(0));
                (new TreeExpander()).expandTree(subClassDataNode);
            }

            List<IDataNode> parameters2 = subClassDataNode.getChildren();
            String name2 = name.substring(name.indexOf(".") + 1);
            traverseParams(parameters2, name2, norm);
        }
        //xu ly
        public void handleUnionDataNode(UnionDataNode var, String name, String coreType, String bound, int i) throws Exception{
            INode correspondingType = ((UnionDataNode) var).getCorrespondingType();
            if(correspondingType instanceof UnionNode){
                List<IVariableNode> attributes = ((UnionNode)correspondingType).getPublicAttributes();
                for(IVariableNode attibute : attributes){
                    String attrName = attibute.getName();
                    String name2 = name.substring(name.indexOf(".") + 1);
                    if(name2.startsWith(attrName)){
                        new TreeExpander().expandStructureNodeOnDataTree((ValueDataNode) var,attrName);
                        List<IDataNode> parameters2 = var.getChildren();
                        traverseParams(parameters2, name2, coreType, bound, i);
                    }

                }
            }
        }
        public void handleNormUnionDataNode(UnionDataNode var, String name, String norm) throws Exception{
            List<IDataNode> children = var.getChildren();
            int size = children.size();
            if(size==0){
                INode correspondingType = ((UnionDataNode) var).getCorrespondingType();
                if(correspondingType instanceof UnionNode){
                    List<IVariableNode> attributes = ((UnionNode)correspondingType).getPublicAttributes();
                    for(IVariableNode attibute : attributes){
                        String attrName = attibute.getName();
                        String name2 = name.substring(name.indexOf(".") + 1);
                        if(name2.startsWith(attrName)){
                            new TreeExpander().expandStructureNodeOnDataTree((ValueDataNode) var,attrName);
                            List<IDataNode> parameters2 = var.getChildren();
                            traverseParams(parameters2, name2, norm);
                        }
                    }
                }
            }
        }

        public  void handleOtherVar (List<IDataNode> parameters, WhiteboxBoundaryMultipleBound multiBounds,List<WhiteboxBoundaryMultipleBound> varMultipleBounds) throws Exception{
            for (WhiteboxBoundaryMultipleBound otherBounds : varMultipleBounds) {
                if (otherBounds != multiBounds) {
                    for (IDataNode otherVar : parameters) {
                        String name = otherBounds.getVar().getName();
                        String norm = otherBounds.getNorm();
                        if (Pattern.matches(otherVar.getName(), name)) {
                            if (otherVar instanceof PointerDataNode) {
                                setPointerDataNodeSize(otherVar);
                                for (IDataNode child : otherVar.getChildren()) {
                                    if (child instanceof NormalDataNode) {
                                        ((NormalDataNode) child).setValue(norm);
                                    }
                                }
                            }
                            else if (otherVar instanceof NormalDataNode) {
                                ((NormalDataNode) otherVar).setValue(norm);
                            }
                            else if (otherVar instanceof EnumDataNode) {
                                ((EnumDataNode) otherVar).setValue(norm);
                                ((EnumDataNode) otherVar).setValueIsSet(true);
                            }
                        }
                        else if (otherVar instanceof StructDataNode) {
                            if (Pattern.matches(otherVar.getName() + ".*", name)) {
                                List<IDataNode> parametersNorm = otherVar.getChildren();
                                String nameNorm = name.substring(name.indexOf(".") + 1);
                                traverseParams(parametersNorm, nameNorm, norm);
                            }
                        }
                        else if (otherVar instanceof ClassDataNode) {
                            if (Pattern.matches(otherVar.getName() + ".*", name)) {
                                handleNormClassDataNode((ClassDataNode) otherVar, name, norm);
                            }
                        }
                        else if (otherVar instanceof UnionDataNode) {
                            if (Pattern.matches(otherVar.getName() + ".*", name)) {
                                handleNormUnionDataNode((UnionDataNode) otherVar, name, norm);
                            }
                        }
                        else if (otherVar instanceof OneDimensionStructureDataNode) {
                            if (Pattern.matches(otherVar.getName() +IRegex.ARRAY_INDEX+".*",name)) {
                                setArrayDataNodeSize(otherVar);
                                List<IDataNode> parametersNorm = otherVar.getChildren();
                                String nameNorm = name.substring(name.indexOf(".") + 1);
                                traverseParams(parametersNorm, nameNorm, norm);
                            }
                        }
                        else if (otherVar instanceof OneDimensionPointerDataNode) {
                            if (Pattern.matches(otherVar.getName() +IRegex.ARRAY_INDEX+IRegex.ARRAY_INDEX+".*",name)) {
                                setArrayDataNodeSize(otherVar);
                                List<IDataNode> parametersNorm = otherVar.getChildren();
                                String nameNorm = name;
                                traverseParams(parametersNorm, nameNorm, norm);
                            }
                        }
                        else if (otherVar instanceof PointerStructureDataNode) {
                            if (Pattern.matches(otherVar.getName() +IRegex.ARRAY_INDEX+".*",name)) {
                                setPointerDataNodeSize(otherVar);
                                List<IDataNode> parametersNorm = otherVar.getChildren();
                                String nameNorm = name.substring(name.indexOf(".") + 1);
                                traverseParams(parametersNorm, nameNorm, norm);
                            }
                        }
                        else if (otherVar instanceof ArrayDataNode) {
                            if(Pattern.matches(otherVar.getName()+IRegex.ARRAY_INDEX,name)){
                                if (otherVar instanceof OneDimensionDataNode) {
                                    setArrayDataNodeSize(otherVar);
                                    for (IDataNode child : otherVar.getChildren()) {
                                        if (child instanceof NormalDataNode) {
                                            ((NormalDataNode) child).setValue(norm);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    //set value th khong co bien
    private void traverseNoBound(List<IDataNode> parameters) throws Exception {
        //set value cho cac params chinh
        for (IDataNode var : parameters) {
            if (var instanceof ArrayDataNode) {
                if (var instanceof OneDimensionDataNode) {
                    setArrayDataNodeSize(var);
                }
            } else if (var instanceof PointerDataNode) {
                setPointerDataNodeSize(var);
            }
        }
    }

}

